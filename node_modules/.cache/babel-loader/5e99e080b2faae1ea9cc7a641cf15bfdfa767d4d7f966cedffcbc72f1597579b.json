{"ast":null,"code":"var _jsxFileName = \"/Users/roy/Desktop/Zealthy/onboarding/src/Components/Admin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Admin.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Admin = () => {\n  _s();\n  const navigate = useNavigate();\n  const [assignments, setAssignments] = useState({\n    AboutMe: null,\n    Address: null,\n    BirthDate: null\n  });\n  const pages = ['page1', 'page2'];\n\n  // Initialize with default assignments\n  useEffect(() => {\n    const savedAssignments = localStorage.getItem('componentAssignments');\n    if (savedAssignments) {\n      const parsed = JSON.parse(savedAssignments);\n      const inverted = {};\n\n      // Convert from page->components to component->page format\n      Object.entries(parsed).forEach(([page, components]) => {\n        components.forEach(comp => {\n          inverted[comp] = page;\n        });\n      });\n      setAssignments(inverted);\n    } else {\n      // Default assignments\n      setAssignments({\n        AboutMe: 'page1',\n        Address: 'page1',\n        BirthDate: 'page2'\n      });\n    }\n  }, []);\n  const handleAssignmentChange = (component, newPage) => {\n    setAssignments(prev => {\n      // If component is being unassigned from its current page\n      if (newPage === prev[component]) {\n        // Find another component to assign to this page to maintain at least one\n        const otherComponents = Object.keys(prev).filter(c => c !== component);\n        const otherAssigned = otherComponents.find(c => prev[c] === newPage);\n        if (!otherAssigned) {\n          // Can't unassign - must have at least one component per page\n          return prev;\n        }\n        return {\n          ...prev,\n          [component]: null\n        };\n      }\n\n      // If component is being assigned to a new page\n      return {\n        ...prev,\n        [component]: newPage\n      };\n    });\n  };\n  const handleSave = () => {\n    // Convert back to page->components format\n    const pageAssignments = {\n      page1: [],\n      page2: []\n    };\n    Object.entries(assignments).forEach(([component, page]) => {\n      if (page) {\n        pageAssignments[page].push(component);\n      }\n    });\n\n    // Ensure each page has at least one component\n    if (pageAssignments.page1.length === 0 || pageAssignments.page2.length === 0) {\n      alert('Each page must have at least one component!');\n      return;\n    }\n    localStorage.setItem('componentAssignments', JSON.stringify(pageAssignments));\n    alert('Assignments saved successfully!');\n    navigate('/');\n  };\n\n  // Convert assignments to page->components for display\n  const getComponentsForPage = page => {\n    return Object.entries(assignments).filter(([, assignedPage]) => assignedPage === page).map(([component]) => component);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Component Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Assign components to pages (each component can only be on one page)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pages-container\",\n      children: pages.map(page => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: page.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"component-list\",\n          children: getComponentsForPage(page).map(component => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"component-item\",\n            children: [component, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAssignmentChange(component, null),\n              className: \"remove-button\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this)]\n          }, component, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"available-components\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Available Components\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), Object.keys(assignments).filter(comp => !assignments[comp] || assignments[comp] === page).map(component => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `available-item ${assignments[component] === page ? 'assigned' : ''}`,\n            onClick: () => handleAssignmentChange(component, assignments[component] === page ? null : page),\n            children: component\n          }, component, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, page, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      className: \"save-button\",\n      children: \"Save Assignments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Admin, \"RN3xHZLIVbE7egHJMmx/nmdMqbA=\", false, function () {\n  return [useNavigate];\n});\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Admin","_s","navigate","assignments","setAssignments","AboutMe","Address","BirthDate","pages","savedAssignments","localStorage","getItem","parsed","JSON","parse","inverted","Object","entries","forEach","page","components","comp","handleAssignmentChange","component","newPage","prev","otherComponents","keys","filter","c","otherAssigned","find","handleSave","pageAssignments","page1","page2","push","length","alert","setItem","stringify","getComponentsForPage","assignedPage","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","onClick","_c","$RefreshReg$"],"sources":["/Users/roy/Desktop/Zealthy/onboarding/src/Components/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Admin.css';\n\nconst Admin = () => {\n  const navigate = useNavigate();\n  const [assignments, setAssignments] = useState({\n    AboutMe: null,\n    Address: null,\n    BirthDate: null\n  });\n\n  const pages = ['page1', 'page2'];\n\n  // Initialize with default assignments\n  useEffect(() => {\n    const savedAssignments = localStorage.getItem('componentAssignments');\n    if (savedAssignments) {\n      const parsed = JSON.parse(savedAssignments);\n      const inverted = {};\n      \n      // Convert from page->components to component->page format\n      Object.entries(parsed).forEach(([page, components]) => {\n        components.forEach(comp => {\n          inverted[comp] = page;\n        });\n      });\n      \n      setAssignments(inverted);\n    } else {\n      // Default assignments\n      setAssignments({\n        AboutMe: 'page1',\n        Address: 'page1',\n        BirthDate: 'page2'\n      });\n    }\n  }, []);\n\n  const handleAssignmentChange = (component, newPage) => {\n    setAssignments(prev => {\n      // If component is being unassigned from its current page\n      if (newPage === prev[component]) {\n        // Find another component to assign to this page to maintain at least one\n        const otherComponents = Object.keys(prev).filter(c => c !== component);\n        const otherAssigned = otherComponents.find(c => prev[c] === newPage);\n        \n        if (!otherAssigned) {\n          // Can't unassign - must have at least one component per page\n          return prev;\n        }\n        \n        return { ...prev, [component]: null };\n      }\n      \n      // If component is being assigned to a new page\n      return { ...prev, [component]: newPage };\n    });\n  };\n\n  const handleSave = () => {\n    // Convert back to page->components format\n    const pageAssignments = { page1: [], page2: [] };\n    \n    Object.entries(assignments).forEach(([component, page]) => {\n      if (page) {\n        pageAssignments[page].push(component);\n      }\n    });\n\n    // Ensure each page has at least one component\n    if (pageAssignments.page1.length === 0 || pageAssignments.page2.length === 0) {\n      alert('Each page must have at least one component!');\n      return;\n    }\n\n    localStorage.setItem('componentAssignments', JSON.stringify(pageAssignments));\n    alert('Assignments saved successfully!');\n    navigate('/');\n  };\n\n  // Convert assignments to page->components for display\n  const getComponentsForPage = (page) => {\n    return Object.entries(assignments)\n      .filter(([, assignedPage]) => assignedPage === page)\n      .map(([component]) => component);\n  };\n\n  return (\n    <div className=\"admin-container\">\n      <h1>Component Management</h1>\n      <p>Assign components to pages (each component can only be on one page)</p>\n      \n      <div className=\"pages-container\">\n        {pages.map(page => (\n          <div key={page} className=\"page-column\">\n            <h2>{page.toUpperCase()}</h2>\n            <div className=\"component-list\">\n              {getComponentsForPage(page).map(component => (\n                <div key={component} className=\"component-item\">\n                  {component}\n                  <button \n                    onClick={() => handleAssignmentChange(component, null)}\n                    className=\"remove-button\"\n                  >\n                    ×\n                  </button>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"available-components\">\n              <h3>Available Components</h3>\n              {Object.keys(assignments)\n                .filter(comp => !assignments[comp] || assignments[comp] === page)\n                .map(component => (\n                  <div \n                    key={component}\n                    className={`available-item ${assignments[component] === page ? 'assigned' : ''}`}\n                    onClick={() => handleAssignmentChange(\n                      component, \n                      assignments[component] === page ? null : page\n                    )}\n                  >\n                    {component}\n                  </div>\n                ))}\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <button onClick={handleSave} className=\"save-button\">\n        Save Assignments\n      </button>\n    </div>\n  );\n};\n\nexport default Admin;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC;IAC7CU,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE,IAAI;IACbC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;;EAEhC;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMa,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC;IACrE,IAAIF,gBAAgB,EAAE;MACpB,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC;MAC3C,MAAMM,QAAQ,GAAG,CAAC,CAAC;;MAEnB;MACAC,MAAM,CAACC,OAAO,CAACL,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEC,UAAU,CAAC,KAAK;QACrDA,UAAU,CAACF,OAAO,CAACG,IAAI,IAAI;UACzBN,QAAQ,CAACM,IAAI,CAAC,GAAGF,IAAI;QACvB,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFf,cAAc,CAACW,QAAQ,CAAC;IAC1B,CAAC,MAAM;MACL;MACAX,cAAc,CAAC;QACbC,OAAO,EAAE,OAAO;QAChBC,OAAO,EAAE,OAAO;QAChBC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,sBAAsB,GAAGA,CAACC,SAAS,EAAEC,OAAO,KAAK;IACrDpB,cAAc,CAACqB,IAAI,IAAI;MACrB;MACA,IAAID,OAAO,KAAKC,IAAI,CAACF,SAAS,CAAC,EAAE;QAC/B;QACA,MAAMG,eAAe,GAAGV,MAAM,CAACW,IAAI,CAACF,IAAI,CAAC,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKN,SAAS,CAAC;QACtE,MAAMO,aAAa,GAAGJ,eAAe,CAACK,IAAI,CAACF,CAAC,IAAIJ,IAAI,CAACI,CAAC,CAAC,KAAKL,OAAO,CAAC;QAEpE,IAAI,CAACM,aAAa,EAAE;UAClB;UACA,OAAOL,IAAI;QACb;QAEA,OAAO;UAAE,GAAGA,IAAI;UAAE,CAACF,SAAS,GAAG;QAAK,CAAC;MACvC;;MAEA;MACA,OAAO;QAAE,GAAGE,IAAI;QAAE,CAACF,SAAS,GAAGC;MAAQ,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC;EAED,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACvB;IACA,MAAMC,eAAe,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAG,CAAC;IAEhDnB,MAAM,CAACC,OAAO,CAACd,WAAW,CAAC,CAACe,OAAO,CAAC,CAAC,CAACK,SAAS,EAAEJ,IAAI,CAAC,KAAK;MACzD,IAAIA,IAAI,EAAE;QACRc,eAAe,CAACd,IAAI,CAAC,CAACiB,IAAI,CAACb,SAAS,CAAC;MACvC;IACF,CAAC,CAAC;;IAEF;IACA,IAAIU,eAAe,CAACC,KAAK,CAACG,MAAM,KAAK,CAAC,IAAIJ,eAAe,CAACE,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MAC5EC,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA5B,YAAY,CAAC6B,OAAO,CAAC,sBAAsB,EAAE1B,IAAI,CAAC2B,SAAS,CAACP,eAAe,CAAC,CAAC;IAC7EK,KAAK,CAAC,iCAAiC,CAAC;IACxCpC,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;;EAED;EACA,MAAMuC,oBAAoB,GAAItB,IAAI,IAAK;IACrC,OAAOH,MAAM,CAACC,OAAO,CAACd,WAAW,CAAC,CAC/ByB,MAAM,CAAC,CAAC,GAAGc,YAAY,CAAC,KAAKA,YAAY,KAAKvB,IAAI,CAAC,CACnDwB,GAAG,CAAC,CAAC,CAACpB,SAAS,CAAC,KAAKA,SAAS,CAAC;EACpC,CAAC;EAED,oBACExB,OAAA;IAAK6C,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B9C,OAAA;MAAA8C,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BlD,OAAA;MAAA8C,QAAA,EAAG;IAAmE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAE1ElD,OAAA;MAAK6C,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7BrC,KAAK,CAACmC,GAAG,CAACxB,IAAI,iBACbpB,OAAA;QAAgB6C,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACrC9C,OAAA;UAAA8C,QAAA,EAAK1B,IAAI,CAAC+B,WAAW,CAAC;QAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC7BlD,OAAA;UAAK6C,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC5BJ,oBAAoB,CAACtB,IAAI,CAAC,CAACwB,GAAG,CAACpB,SAAS,iBACvCxB,OAAA;YAAqB6C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,GAC5CtB,SAAS,eACVxB,OAAA;cACEoD,OAAO,EAAEA,CAAA,KAAM7B,sBAAsB,CAACC,SAAS,EAAE,IAAI,CAAE;cACvDqB,SAAS,EAAC,eAAe;cAAAC,QAAA,EAC1B;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,GAPD1B,SAAS;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQd,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENlD,OAAA;UAAK6C,SAAS,EAAC,sBAAsB;UAAAC,QAAA,gBACnC9C,OAAA;YAAA8C,QAAA,EAAI;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EAC5BjC,MAAM,CAACW,IAAI,CAACxB,WAAW,CAAC,CACtByB,MAAM,CAACP,IAAI,IAAI,CAAClB,WAAW,CAACkB,IAAI,CAAC,IAAIlB,WAAW,CAACkB,IAAI,CAAC,KAAKF,IAAI,CAAC,CAChEwB,GAAG,CAACpB,SAAS,iBACZxB,OAAA;YAEE6C,SAAS,EAAE,kBAAkBzC,WAAW,CAACoB,SAAS,CAAC,KAAKJ,IAAI,GAAG,UAAU,GAAG,EAAE,EAAG;YACjFgC,OAAO,EAAEA,CAAA,KAAM7B,sBAAsB,CACnCC,SAAS,EACTpB,WAAW,CAACoB,SAAS,CAAC,KAAKJ,IAAI,GAAG,IAAI,GAAGA,IAC3C,CAAE;YAAA0B,QAAA,EAEDtB;UAAS,GAPLA,SAAS;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQX,CACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA,GAhCE9B,IAAI;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiCT,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENlD,OAAA;MAAQoD,OAAO,EAAEnB,UAAW;MAACY,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChD,EAAA,CArIID,KAAK;EAAA,QACQH,WAAW;AAAA;AAAAuD,EAAA,GADxBpD,KAAK;AAuIX,eAAeA,KAAK;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}